// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates tailored social media posts based on user inputs.
 *
 * - generateSocialMediaPosts - A function that generates social media posts.
 * - GenerateSocialMediaPostsInput - The input type for the generateSocialMediaPosts function.
 * - GenerateSocialMediaPostsOutput - The return type for the generateSocialMediaPosts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateSocialMediaPostsInputSchema = z.object({
  product: z.object({
    name: z.string().describe('Name of the product or service.'),
    one_line_description: z.string().describe('A concise one-line description of the product or service.'),
    problem_solved: z.string().describe('The specific problem the product or service addresses for the user.'),
    benefits: z.array(z.string()).describe('A list of key benefits the product or service offers.'),
    differentiator: z.string().describe('What makes this product or service unique compared to competitors.'),
  }).describe('Detailed information about the product or service.'),

  audience: z.object({
    target: z.string().describe('The intended target audience for the social media posts.'),
    desired_action: z.string().describe('The desired action from the audience (e.g., Visit our website, Learn more).'),
    emotion_to_trigger: z.string().describe('The primary emotion the posts should aim to evoke in the audience (e.g., excitement, trust, curiosity).'),
  }).describe('Details about the target audience and desired engagement.'),

  keyMessage: z.string().describe('The core message to be conveyed in the posts, overarching the product and audience details.'), // Kept at top level as it's a general message

  socialPlatform: z
    .enum([
      'Facebook',
      'Twitter',
      'Instagram',
      'LinkedIn',
      'TikTok',
      'YouTube',
    ])
    .describe('The specific social media platform for the posts.'),

  formatConstraints: z
    .string()
    .optional()
    .describe('Any specific formatting requirements for the platform (e.g., character limits, hashtag usage).'),
});

export type GenerateSocialMediaPostsInput = z.infer<typeof GenerateSocialMediaPostsInputSchema>;

const GenerateSocialMediaPostsOutputSchema = z.object({
  posts: z
    .array(z.string())
    .describe('An array of social media posts tailored to the specified platform.'),
});

export type GenerateSocialMediaPostsOutput = z.infer<typeof GenerateSocialMediaPostsOutputSchema>;

export async function generateSocialMediaPosts(
  input: GenerateSocialMediaPostsInput
): Promise<GenerateSocialMediaPostsOutput> {
  return generateSocialMediaPostsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateSocialMediaPostsPrompt',
  input: { schema: GenerateSocialMediaPostsInputSchema }, // Use the updated schema
  output: { schema: GenerateSocialMediaPostsOutputSchema },
  prompt: `You are a social media marketing expert. Generate social media posts based on the following information for the specified platform. Adhere to any format constraints and ensure each post incorporates the desired call to action.

Product Information:
- Name: {{{product.name}}}
- One-Line Description: {{{product.one_line_description}}}
- Problem Solved: {{{product.problem_solved}}}
- Key Benefits: {{{product.benefits}}} (Present these benefits compellingly)
- Differentiator: {{{product.differentiator}}}

Audience & Engagement:
- Target Audience: {{{audience.target}}}
- Desired Action (Call to Action): {{{audience.desired_action}}}
- Emotion to Trigger: {{{audience.emotion_to_trigger}}}

Core Campaign Details:
- Overarching Key Message: {{{keyMessage}}}
- Social Platform: {{{socialPlatform}}}
- Format Constraints: {{{formatConstraints}}}

Generate 3 distinct social media posts. Each post should be tailored to the specified platform and audience, clearly convey the key message, and strongly feature the call to action. Return a JSON array of strings, where each string is a complete social media post.
`,
});

const generateSocialMediaPostsFlow = ai.defineFlow(
  {
    name: 'generateSocialMediaPostsFlow',
    inputSchema: GenerateSocialMediaPostsInputSchema,
    outputSchema: GenerateSocialMediaPostsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
